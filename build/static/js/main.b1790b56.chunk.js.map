{"version":3,"sources":["globals.js","screens/Loader.js","screens/Welcome.js","App.js","serviceWorker.js","index.js"],"names":["G","host","session_name","require","Loader","react_default","a","createElement","className","Component","Welcome","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSession","_ref","asyncToGenerator","regenerator_default","mark","_callee","session","cookies","wrap","_context","prev","next","undefined","set","path","setState","__session","showScreen","stop","_x","apply","arguments","state","get","modules","current","fetch","method","body","JSON","stringify","defineProperty","then","res","console","log","checkSession","__screen","toLowerCase","screens_Loader","screens_Welcome","getCurrentScreen","withCookies","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1790b56.chunk.js","sourcesContent":["export const G = {\n    host: 'http://localhost:3000',\n    session_name: \"__kitsess\",\n};","import React, { Component } from 'react';\nrequire('../styles/Loader.scss');\n\nclass Loader extends Component {\n\n    render() {\n        return (\n            <div className=\"loader\">\n                <div className=\"logo\"/>\n            </div>\n        );\n    }\n}\n\nexport default Loader;","import React, { Component } from 'react';\nrequire('../styles/Welcome.scss');\n\nclass Welcome extends Component {\n\n    render() {\n        return (\n            <div className=\"welcome\">\n                <div className=\"background\"/>\n                <div className=\"form\">\n                    <div className=\"kitkard-logo\"/>\n                    <div className=\"sign-social\">\n                        <div className=\"social-title\">\n                            Sign with\n                        </div>\n                        <div className=\"social-buttons\">\n                            <div className=\"social-button sign-google\"/>\n                            <div className=\"social-button sign-facebook\"/>\n                        </div>\n                    </div>\n                    <div className=\"bottom-block\">\n                        <div className=\"bb login\">Sign In with e-mail</div>\n                        <div className=\"bb registration\">Registration</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Welcome;","import React, { Component } from 'react';\nimport { instanceOf } from 'prop-types';\nimport { withCookies, Cookies } from 'react-cookie';\n\nimport {G} from './globals';\nimport Loader from './screens/Loader';\nimport Welcome from './screens/Welcome';\n\nimport './App.css';\nrequire('./styles/app.scss');\n\nclass App extends Component {\n    static propTypes = {\n        cookies: instanceOf(Cookies).isRequired\n    };\n\n    constructor(props) {\n        super(props);\n\n        const { cookies } = props;\n        this.state = {\n            __session: cookies.get(G.session_name) || null,\n            modules: [],\n            current: \"Loader\"\n\n        };\n    }\n\n    checkSession() {\n        if (this.state.__session !== null) {\n            fetch(G.host+'/api/user', {\n                method: \"GET\",\n                body: JSON.stringify({[G.session_name]: this.state.__session})\n            }).then(res => {\n                //TODO: is is logged go home, else goto login\n                console.log(res);\n            })\n        } else {\n            this.showScreen(\"Welcome\");\n        }\n    };\n\n    componentWillMount() {\n        this.checkSession();\n    }\n\n    showScreen(__screen) {\n        this.setState({\n            current: __screen\n        })\n    }\n\n    handleSession = async (session) => {\n\n        if (session !== undefined) {\n            const {cookies} = this.props;\n            const session_name = G.session_name;\n            cookies.set(session_name, session, {path: '/'});\n            await this.setState({__session: session_name});\n            //TODO: show home\n        } else {\n            this.showScreen(\"login\")\n        }\n    };\n\n    getCurrentScreen() {\n        switch (this.state.current.toLowerCase())\n        {\n            case \"loader\": return <Loader/>;\n            case \"welcome\": return <Welcome/>;\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                {this.getCurrentScreen()}\n            </div>\n        );\n    }\n}\n\nexport default withCookies(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}